{"version":3,"sources":["Graphql/Queries.ts","Components/SearchComponent.tsx","Components/ListItemComponent.tsx","Components/PaginationComponent.tsx","Pages/PeoplePage.tsx","Pages/PeopleDetailsPage.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_PEOPLE_LIST","gql","GET_PEOPLE_DETAILS","SEARCH_PEOPLE","Search","handleChange","handleClick","search","className","type","value","onChange","placeholder","autoFocus","onClick","ListItem","people","url","split","id","length","to","name","mass","height","gender","Pagination","current_page","next_page","previous_page","pagination","last_page","Math","ceil","count","next","current","parseInt","previous","aria-label","undefined","People","props","history","useHistory","useState","setSearch","datas","setDatas","page","match","params","useQuery","variables","loading","error","data","useLazyQuery","onCompleted","searchPeople","handleSearch","_datas","getPeopleList","e","target","push","replace","results","map","role","href","PeopleDetails","PeopleId","getPeopleDetails","homeworld","goBack","App","client","ApolloClient","uri","cache","InMemoryCache","src","logo","alt","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f4733df.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_PEOPLE_LIST = gql`\n    query getPeopleList($page: String!) {\n        getPeopleList(page: $page) {\n            count\n            next\n            previous\n            results {\n                name\n                mass\n                height\n                gender\n                homeworld\n                url\n            }\n        }\n    }\n`;\n\n\nexport const GET_PEOPLE_DETAILS = gql`\n    query getPeopleDetails($id: Int!) {\n        getPeopleDetails(id: $id) {\n            name\n            mass\n            height\n            gender\n            homeworld\n        }\n    }\n`;\n\nexport const SEARCH_PEOPLE = gql`\n    query searchPeople($name: String!) {\n        searchPeople(name: $name) {\n            count\n            next\n            previous\n            results {\n                name\n                mass\n                height\n                gender\n                homeworld\n                url\n            }\n        }\n    }\n`;","import React from 'react'\n\ninterface Props {\n    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    handleClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    search: string;\n}\n\nexport const Search: React.FC<Props> = ({ handleChange, handleClick, search }) =>  {\n    return (\n        <div className=\"input-group mb-3\">\n            <input type=\"text\" className=\"form-control\" value={search} onChange={handleChange} placeholder=\"Search something...\" autoFocus/>\n            <button className=\"input-group-text\" onClick={handleClick}>Search</button>\n        </div>\n    )\n}\n","import { Link } from 'react-router-dom';\n\ninterface People {\n    name: string;\n    height: string;\n    mass: string;\n    gender: string;\n    url: string;\n}\n\ninterface Props {\n    people: People \n}\n\nexport const ListItem: React.FC<Props> = ({ people }) => {\n    let url = people.url.split('/');\n    let id = url[url.length-2];\n\n    return (\n        <Link to={`/people/${id}`} className=\"text-decoration-none text-dark\">\n            <div className=\"card card-body mb-3\">\n                <div className=\"row\">\n                    <div className=\"col-md-9\">\n                        <div>Name: { people.name }</div>\n                        <div>\n                            <span>Mass: { people.mass }</span>\n                            <span className=\"mx-1\">Height: { people.height }</span>\n                            <span className=\"mx-1\">Gender: { people.gender }</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Link>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface Data {\n    count: number;\n    next: string;\n    previous: string;\n    results: any;\n}\n\ninterface Props {\n    pagination: Data;\n}\n\nexport const Pagination: React.FC<Props> = ({pagination}) => {\n    let last_page = Math.ceil(pagination.count / 10);\n\n    let current_page;\n    if(pagination.next !== null) {\n        let current = pagination.next.split('page=');\n        current_page = parseInt(current[current.length - 1]) - 1;\n    } else current_page = last_page;\n\n    // get next page\n    let next_page;\n    if(pagination.next != null){\n        const next = pagination.next.split('/?');\n        next_page = next[next.length-1];\n    }\n\n    // get previous page\n    let previous_page;\n    if(pagination.previous != null){\n        const previous = pagination.previous.split('/?');\n        previous_page = previous[previous.length-1];\n    }\n\n    return (\n        <>\n            <nav aria-label=\"Page navigation\">\n                <ul className=\"pagination\">\n                    <li className={`page-item ${previous_page === undefined ? 'disabled' : ''}`}>\n                        <Link to={`/${previous_page}`} className='page-link'>Previous</Link>\n                    </li>\n                    <li className={`page-item ${next_page === undefined ? 'disabled' : ''}`}>\n                        <Link to={`/${next_page}`} className='page-link'>Next</Link>\n                    </li>\n                </ul>\n            </nav>\n            <div className=\"mb-3\">Page {current_page} of {last_page + \" | \" + pagination.count} results</div>\n        </>\n    )\n}","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { GET_PEOPLE_LIST } from '../Graphql/Queries';\nimport { SEARCH_PEOPLE } from '../Graphql/Queries';\n\nimport { Search } from '../Components/SearchComponent';\nimport { ListItem } from '../Components/ListItemComponent';\nimport { Pagination } from '../Components/PaginationComponent';\n\ninterface Props {\n    props: any;\n}\n\nconst People: React.FC<Props> = (props: any) => {\n    let history = useHistory();\n    const [search, setSearch ] = useState<string>(\"\");\n    let [datas, setDatas] = useState<undefined>();\n\n    let { page } = props.match.params;\n    let { loading, error, data } = useQuery(GET_PEOPLE_LIST, {\n        variables: { page: page || \"page=1\"}\n    });\n\n    let [handleSearch] = useLazyQuery(SEARCH_PEOPLE, { \n        variables: { name: '/search=' + search },\n        onCompleted: (data) => {\n            setDatas(data.searchPeople);\n        },\n    });\n\n    const handleClick = (e: any) => {\n        handleSearch();\n        if(search.length > 0){\n            history.push('/search=' + search);\n        } else {\n            history.replace(\"/\");\n        }\n    }\n\n    if(loading) return <h5 className=\"text-center mt-5\">Loading...</h5>;\n    if(error) return <h5 className=\"text-center mt-5\">Something went wrong!</h5>;\n\n    let _datas = data.getPeopleList;\n    if(datas){\n        _datas = datas;\n    }\n\n    return (\n        <>\n        <Search handleChange={e => setSearch(e.target.value)} handleClick={e => handleClick(e)} search={search} />\n        <Pagination pagination={_datas} />\n        {(_datas.results.map((people: any) => {\n            return <ListItem key={people.url} people={people} />\n        }))}\n        <div className=\"text-center my-4\"><small>Made with <span role=\"img\" aria-label=\"love\">❤</span> by <a href=\"mailto:nelhamstrong9@gmail.com\">Nelh Amstrong</a></small></div>\n        </>\n    )\n}\n\nexport default People;\n","import { useQuery } from \"@apollo/client\";\nimport { useHistory } from 'react-router-dom';\nimport { GET_PEOPLE_DETAILS } from '../Graphql/Queries'\n\ninterface Props {\n    PeopleId?: any;\n}\n\nconst PeopleDetails: React.FC<Props> = (PeopleId: any) => {\n    let history = useHistory();\n    let { id }  = PeopleId.match.params;\n    const { loading, error, data } = useQuery(GET_PEOPLE_DETAILS, {\n        variables: { id: parseInt(id)},\n    });\n\n    if(loading) return <h5 className=\"text-center mt-5\">Loading...</h5>;\n    if(error) return <h5 className=\"text-center mt-5\">Something went wrong!</h5>;\n\n    const { name, mass, height, gender, homeworld } = data.getPeopleDetails;\n\n    return (\n        <>\n        <h4 className=\"my-3\">People details</h4>\n        <ul className=\"list-group mb-4\">\n            <li className=\"list-group-item text-white\">Name: { name }</li>\n            <li className=\"list-group-item text-white\">Mass: { mass }</li>\n            <li className=\"list-group-item text-white\">height: { height }</li>\n            <li className=\"list-group-item text-white\">gender: { gender }</li>\n            <li className=\"list-group-item text-white\">homeworld: { homeworld }</li>\n        </ul>\n        <button className=\"btn btn-secondary\" onClick={() => history.goBack()}>Back</button>\n        </>\n    );\n  }\n\nexport default PeopleDetails;","export default __webpack_public_path__ + \"static/media/logo.de1cdc4e.png\";","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport './App.scss';\n\nimport People from './Pages/PeoplePage';\nimport PeopleDetails from './Pages/PeopleDetailsPage';\n\nimport logo from './logo.png';\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: '/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container mt-5\">\n          <img src={logo} className=\"logo\" alt=\"logo\"/>\n          <Route exact path=\"/:page?\" component={People} />\n          <Route path=\"/people/:id\" component={PeopleDetails} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}